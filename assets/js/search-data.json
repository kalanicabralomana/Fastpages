{
  
    
        "post0": {
            "title": "Program Design for Final Project",
            "content": "Purpose . Our plan is to make a platform, called Striver, where can view various motivational and inspirational quotes. Essentially our website would operate like a social media site for motivation and self gain. . Planning . We decided to plan this by contributing on a google drawing to get an idea of how we will attack this idea. We decided to also meet up with each other over the week end so that we can collaborate on a more intimate level so we could effectively share our ideas. . . Purpose and Function . Website that displays inspirational quotes | Users can view these quotes to find motivation and can like the quotes and share | . Data Abstraction . We will store users like patterns and users information in lists | . Managing Complexity . The program we will be creating will contain a list of specific users like and quotes that are essential to contain in out code segment | . Procedural Abstraction . We will use different HTML templates for different views for the users | . Algorithm Implementation . Our program will involve lists and arrays to determine the path and options for users to navigate the through the website | . Testing . We will use print statements for debugging to make sure everything works orderly | .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/10/09/final-overview.html",
            "relUrl": "/markdown/2022/10/09/final-overview.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Identifying and Correcting Errors Unit 1.4",
            "content": "1.4 College Board Video Notes . 1.4.1 . Errors are innevitable in programming | In errors in an algorithm or program, there are 4 types of errors: Logic Error:A mistake in the algorithm that causes it behave incorrectly or unexpectedly | Syntax Error: A mistake in the program where the rules in the programming language are not followed | Run-time error: Mistake in the program that occurs during the excecution of the program. Dependent on the language. Usually refered to as a bug. | Overflow error: error that occurs when a computer attempts to handle a number that is outside of the defined range of values. | . | . 1.4.2 . Understanding how to correct errors is essential to programming | Best ways to correct errors Test cases | Hand tracing | Visualizations | Debuggers | adding extra output statements. | . | The syntax error is usually the easiest error to fix it tells the programmer which line and what the error was. | . | Logic errors are difficult to find and fix. | . 1.4.3 . Programmers should come up with testing schemes to ensure that their program works. Identify inputs and correspondng exprected outputs or behaviors check the correctness of the algorithm or program. | . | Defined inputs used to test a program should demonstrate the different exprected outcomes that are at or just beyond the min and max of input data | Program requirements identify appropriate defined inputs for testing. | As soon as they start programming, they should constantly be testing. | . Quiz . .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/10/07/unit-1.4-notes.html",
            "relUrl": "/markdown/2022/10/07/unit-1.4-notes.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "API Implementation",
            "content": "# Begin Rapid API Code import requests url = &quot;https://gratitude-questions.p.rapidapi.com/question&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;618474c20emshb969af58dc7ea8fp142551jsn4e58bb034dc2&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;gratitude-questions.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#39;question&#39;: &#39;What happened today/this week/this month/this year for which I’m grateful?&#39;} .",
            "url": "https://kcabralomana.github.io/Fastpages/apiimplementation",
            "relUrl": "/apiimplementation",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "AWS Deployment",
            "content": "Docker . We created 4 containers with each site in one of the containers bound to 8080 with their own unique ports. . . Docker Compose File . Inside this file is instructions to build container that contain personal flask. . . Nginx . . . cURL Command . Tests if the personal flask is working on local machine . .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/10/04/aws-deployment.html",
            "relUrl": "/markdown/2022/10/04/aws-deployment.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;618474c20emshb969af58dc7ea8fp142551jsn4e58bb034dc2&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;618474c20emshb969af58dc7ea8fp142551jsn4e58bb034dc2&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1498,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29495,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;983455823290&#34;,&#34;total24hVolume&#34;:&#34;62383417797&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384261925458&#34;,&#34;price&#34;:&#34;20043.550686742812&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.19&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20049.815416539706&#34;,&#34;20094.393545497052&#34;,&#34;20158.58698671382&#34;,&#34;20232.898003614322&#34;,&#34;20293.618431388033&#34;,&#34;20355.557600474516&#34;,&#34;20337.9076796474&#34;,&#34;20378.945224236224&#34;,&#34;20339.414870489745&#34;,&#34;20264.990263682765&#34;,&#34;20214.108582714292&#34;,&#34;20193.761930672114&#34;,&#34;20158.951877271087&#34;,&#34;20136.89567880366&#34;,&#34;20148.0982758071&#34;,&#34;20216.514371856883&#34;,&#34;20200.289873786565&#34;,&#34;20114.64889949858&#34;,&#34;20013.833027178112&#34;,&#34;20064.500867424038&#34;,&#34;20055.394308319686&#34;,&#34;20099.910720100273&#34;,&#34;20073.04610540898&#34;,&#34;20038.091723195073&#34;,&#34;20039.125781049443&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;35071687070&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166708694201&#34;,&#34;price&#34;:&#34;1362.9253643080083&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.01&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.0384567537553&#34;,&#34;1350.486586991934&#34;,&#34;1353.0627871586412&#34;,&#34;1361.5377625273948&#34;,&#34;1374.2027236665588&#34;,&#34;1375.7214408982059&#34;,&#34;1373.1173416682698&#34;,&#34;1375.6203205822255&#34;,&#34;1374.5833968999716&#34;,&#34;1369.002110485522&#34;,&#34;1366.1188984768796&#34;,&#34;1363.745025823938&#34;,&#34;1360.3770675480944&#34;,&#34;1358.4329430526363&#34;,&#34;1359.8137982327592&#34;,&#34;1368.3883772574375&#34;,&#34;1369.125079203522&#34;,&#34;1365.0271243860136&#34;,&#34;1362.4695763330856&#34;,&#34;1364.5539706587408&#34;,&#34;1363.1033233537237&#34;,&#34;1364.3554683087928&#34;,&#34;1361.7063757927622&#34;,&#34;1358.8381283825643&#34;,&#34;1360.3494896776085&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;11771417668&#34;,&#34;btcPrice&#34;:&#34;0.06799819980047114&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68224275095&#34;,&#34;price&#34;:&#34;1.0001715321495874&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.13&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0007218035748657&#34;,&#34;0.9998195240120525&#34;,&#34;1.0001942073599759&#34;,&#34;0.999198242906088&#34;,&#34;0.999970326331934&#34;,&#34;0.9999578602237212&#34;,&#34;1.0002749344768964&#34;,&#34;0.9998618718046304&#34;,&#34;1.0006329886842509&#34;,&#34;1.0010446040777476&#34;,&#34;1.0004916026440913&#34;,&#34;1.0007888640527003&#34;,&#34;1.0002640858839233&#34;,&#34;1.0005846915246637&#34;,&#34;1.0000905108537632&#34;,&#34;0.9994968342509783&#34;,&#34;1.0011082125129211&#34;,&#34;1.0015062761537357&#34;,&#34;0.99991903402945&#34;,&#34;1.0002947247279268&#34;,&#34;0.9999857036550877&#34;,&#34;0.9998206366656677&#34;,&#34;1.0007565219107768&#34;,&#34;1.000382762100078&#34;,&#34;1.000150515797916&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;41646216899&#34;,&#34;btcPrice&#34;:&#34;0.000049899917822999&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46280630009&#34;,&#34;price&#34;:&#34;1.0003473267455394&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.07&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0005863270210245&#34;,&#34;0.9998825447125274&#34;,&#34;1.0001565051935892&#34;,&#34;0.9992645129007548&#34;,&#34;0.9998675462392212&#34;,&#34;0.9998272931691644&#34;,&#34;1.0002224153445407&#34;,&#34;0.9999317743533871&#34;,&#34;1.0006585942367816&#34;,&#34;1.000952432863041&#34;,&#34;1.0003989295505482&#34;,&#34;1.000638496717557&#34;,&#34;1.0002352785325133&#34;,&#34;1.0005941664435252&#34;,&#34;1.0001179673001188&#34;,&#34;0.9994925842454877&#34;,&#34;1.0009754698769568&#34;,&#34;1.0014336424001&#34;,&#34;1.000039268414544&#34;,&#34;1.0002099832307998&#34;,&#34;1.00012589477054&#34;,&#34;0.9998248228490436&#34;,&#34;1.000699890105951&#34;,&#34;1.000340215196537&#34;,&#34;1.0001150874319509&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3365540517&#34;,&#34;btcPrice&#34;:&#34;0.000049908688454446&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41820751271&#34;,&#34;price&#34;:&#34;288.66628530690264&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.42&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0648258481622&#34;,&#34;293.07747587851765&#34;,&#34;293.8892235863702&#34;,&#34;294.692062571157&#34;,&#34;297.0994193910956&#34;,&#34;296.5460033456306&#34;,&#34;296.5992676846958&#34;,&#34;296.31121173116384&#34;,&#34;295.9763936716012&#34;,&#34;295.45727286275803&#34;,&#34;294.73322587331967&#34;,&#34;295.1813004084462&#34;,&#34;294.52442391454343&#34;,&#34;294.3063124553447&#34;,&#34;294.21373025374237&#34;,&#34;294.75035855506684&#34;,&#34;294.44940982235465&#34;,&#34;293.9815395477355&#34;,&#34;293.6440321116512&#34;,&#34;294.01889977490123&#34;,&#34;293.68331743186303&#34;,&#34;293.4934818966126&#34;,&#34;293.237747035524&#34;,&#34;293.09977258234545&#34;,&#34;290.53744555276114&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;805768248&#34;,&#34;btcPrice&#34;:&#34;0.014401953517039877&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24966436288&#34;,&#34;price&#34;:&#34;0.5007450761516665&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.17&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4938981661775617&#34;,&#34;0.49343949277953586&#34;,&#34;0.49137790768876555&#34;,&#34;0.4914838199245121&#34;,&#34;0.49555594870572434&#34;,&#34;0.4951890037750714&#34;,&#34;0.495754600642816&#34;,&#34;0.49961106217113954&#34;,&#34;0.5027605293364544&#34;,&#34;0.49962279916372687&#34;,&#34;0.4953862217102938&#34;,&#34;0.49411321871723957&#34;,&#34;0.49379968350472936&#34;,&#34;0.4946781782257021&#34;,&#34;0.49668492450937674&#34;,&#34;0.4980449756635561&#34;,&#34;0.4988427519496724&#34;,&#34;0.49595508147106043&#34;,&#34;0.49529670080659266&#34;,&#34;0.4959093546110407&#34;,&#34;0.4965287083276942&#34;,&#34;0.4972253140887907&#34;,&#34;0.49684091430008437&#34;,&#34;0.49591972510691007&#34;,&#34;0.49994566065984875&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;2024557136&#34;,&#34;btcPrice&#34;:&#34;0.000024982852787798&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21381904916&#34;,&#34;price&#34;:&#34;1.0000123532969556&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.14&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0006911778549377&#34;,&#34;0.9998223006382758&#34;,&#34;1.0001331288898294&#34;,&#34;0.9991026459307589&#34;,&#34;0.9998674015440719&#34;,&#34;0.9998433930969712&#34;,&#34;1.0001634369759003&#34;,&#34;0.999743197805345&#34;,&#34;1.0005842712581856&#34;,&#34;1.0010101947902401&#34;,&#34;1.0003801992349832&#34;,&#34;1.000693822164607&#34;,&#34;1.0001716820530642&#34;,&#34;1.0004873849756009&#34;,&#34;0.9999973782619707&#34;,&#34;0.9994223622813375&#34;,&#34;1.0009911799051412&#34;,&#34;1.001418278872234&#34;,&#34;0.9999440421681933&#34;,&#34;1.0002616666743402&#34;,&#34;0.9998929494511372&#34;,&#34;0.9996520830568972&#34;,&#34;1.0006716767140225&#34;,&#34;1.000354378405346&#34;,&#34;1.0001279201895084&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6172846651&#34;,&#34;btcPrice&#34;:&#34;0.000049891976173582&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13367734900&#34;,&#34;price&#34;:&#34;0.42965822273410903&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.42935079509289215&#34;,&#34;0.42999716955939554&#34;,&#34;0.43113793091933544&#34;,&#34;0.43164235605366286&#34;,&#34;0.4351709066340561&#34;,&#34;0.4357776886667802&#34;,&#34;0.43477220488691914&#34;,&#34;0.435032637484956&#34;,&#34;0.43469659246229525&#34;,&#34;0.43367955301045125&#34;,&#34;0.4325764108641088&#34;,&#34;0.4320905081460968&#34;,&#34;0.43129495367629755&#34;,&#34;0.43111268550308746&#34;,&#34;0.430158477187354&#34;,&#34;0.43192082025335765&#34;,&#34;0.4318813080231911&#34;,&#34;0.4305808119251774&#34;,&#34;0.42933152537844466&#34;,&#34;0.42999164634507475&#34;,&#34;0.4297017943321375&#34;,&#34;0.4300182000032324&#34;,&#34;0.42942447696635627&#34;,&#34;0.428848003593003&#34;,&#34;0.4291040903865556&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;445785221&#34;,&#34;btcPrice&#34;:&#34;0.000021436233003282&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11990770244&#34;,&#34;price&#34;:&#34;33.75573896585963&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.06&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.76194937947399&#34;,&#34;33.83018839969452&#34;,&#34;34.013048292328065&#34;,&#34;34.22695861442601&#34;,&#34;34.302948506263874&#34;,&#34;34.36117055139888&#34;,&#34;34.33297730862471&#34;,&#34;34.37725515202584&#34;,&#34;34.38122367897517&#34;,&#34;34.2550563983116&#34;,&#34;34.0192701316118&#34;,&#34;34.03538298798629&#34;,&#34;34.021627294260924&#34;,&#34;33.98686067812641&#34;,&#34;33.967205892391455&#34;,&#34;34.10939467413966&#34;,&#34;34.070165431736925&#34;,&#34;33.91930206986467&#34;,&#34;33.91151583417362&#34;,&#34;33.9043511309003&#34;,&#34;33.87901060721445&#34;,&#34;33.78369211116179&#34;,&#34;33.71997962675008&#34;,&#34;33.69090443012692&#34;,&#34;33.71623046280206&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;1122776480&#34;,&#34;btcPrice&#34;:&#34;0.001684119719775315&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8493930545&#34;,&#34;price&#34;:&#34;0.06402262465188333&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.79&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06433091677136754&#34;,&#34;0.06433630601076162&#34;,&#34;0.06451575976472833&#34;,&#34;0.0650019016600869&#34;,&#34;0.06499257008710045&#34;,&#34;0.06506417867247787&#34;,&#34;0.06570475320958324&#34;,&#34;0.06606716612821471&#34;,&#34;0.06581607679725353&#34;,&#34;0.06558476365046208&#34;,&#34;0.06535626375793624&#34;,&#34;0.06514220430063168&#34;,&#34;0.0652554256706354&#34;,&#34;0.06508627169601806&#34;,&#34;0.065071133950613&#34;,&#34;0.06534515755253277&#34;,&#34;0.06526490146098139&#34;,&#34;0.06491687069450776&#34;,&#34;0.06439252809452549&#34;,&#34;0.06435646052140642&#34;,&#34;0.06399725778730381&#34;,&#34;0.06396797107291348&#34;,&#34;0.0638868184143223&#34;,&#34;0.06395160058327058&#34;,&#34;0.06390259648154385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;595030474&#34;,&#34;btcPrice&#34;:&#34;0.0000031941758051&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7352194181&#34;,&#34;price&#34;:&#34;0.8397064959901155&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.30&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8432829962954229&#34;,&#34;0.849181551492284&#34;,&#34;0.8536201943011714&#34;,&#34;0.8541813180047458&#34;,&#34;0.8515224098574884&#34;,&#34;0.850265179544537&#34;,&#34;0.847322542943578&#34;,&#34;0.8476972952771256&#34;,&#34;0.8471467304336225&#34;,&#34;0.844702158937144&#34;,&#34;0.8449149090388831&#34;,&#34;0.8477264619612334&#34;,&#34;0.8464360624186148&#34;,&#34;0.8435578343312881&#34;,&#34;0.8408577666895115&#34;,&#34;0.8417763852043721&#34;,&#34;0.8402724477206464&#34;,&#34;0.8394910131272694&#34;,&#34;0.8422499081060874&#34;,&#34;0.8433600566558104&#34;,&#34;0.8441214660335867&#34;,&#34;0.8449033953802154&#34;,&#34;0.8423323790199002&#34;,&#34;0.8400413323772581&#34;,&#34;0.8391761182935571&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;368144731&#34;,&#34;btcPrice&#34;:&#34;0.000041894098960496&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7331427980&#34;,&#34;price&#34;:&#34;6.3728697554070655&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.37&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.399701718761633&#34;,&#34;6.405337242113671&#34;,&#34;6.4266248804229384&#34;,&#34;6.451455659600661&#34;,&#34;6.483491915376635&#34;,&#34;6.501811546262432&#34;,&#34;6.498760844193182&#34;,&#34;6.4976323368143705&#34;,&#34;6.477581013777311&#34;,&#34;6.479927431264483&#34;,&#34;6.44825138763542&#34;,&#34;6.445035181012187&#34;,&#34;6.445523861596261&#34;,&#34;6.437132477606484&#34;,&#34;6.433784796155034&#34;,&#34;6.461347613817356&#34;,&#34;6.45359701099763&#34;,&#34;6.425445253315296&#34;,&#34;6.39160085877377&#34;,&#34;6.391093720701694&#34;,&#34;6.384943624903759&#34;,&#34;6.392553223171491&#34;,&#34;6.381634769644093&#34;,&#34;6.386531769957386&#34;,&#34;6.3726444498480515&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;379976430&#34;,&#34;btcPrice&#34;:&#34;0.000317951138249283&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6652358295&#34;,&#34;price&#34;:&#34;0.000011283672136356&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.71&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011384972187891&#34;,&#34;0.00001139313280198&#34;,&#34;0.000011429580139168&#34;,&#34;0.000011482444529902&#34;,&#34;0.000011517178722671&#34;,&#34;0.000011525811358147&#34;,&#34;0.000011555785322931&#34;,&#34;0.000011591429783261&#34;,&#34;0.000011505189155736&#34;,&#34;0.000011477778399831&#34;,&#34;0.000011435059536425&#34;,&#34;0.000011440807594404&#34;,&#34;0.000011458315362184&#34;,&#34;0.00001147552224329&#34;,&#34;0.000011470428630138&#34;,&#34;0.000011471399104906&#34;,&#34;0.000011432350597095&#34;,&#34;0.00001137306433665&#34;,&#34;0.00001135436977918&#34;,&#34;0.000011335712607523&#34;,&#34;0.0000112856679044&#34;,&#34;0.000011278240158878&#34;,&#34;0.000011288521225872&#34;,&#34;0.000011277331662152&#34;,&#34;0.000011272877294086&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;302112350&#34;,&#34;btcPrice&#34;:&#34;5.62957747e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330376496&#34;,&#34;price&#34;:&#34;0.9999569400125321&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.10&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.000345680785842&#34;,&#34;0.9996768088644196&#34;,&#34;0.9997620874678727&#34;,&#34;0.9991192679426156&#34;,&#34;0.9994334358286668&#34;,&#34;0.9995689641224628&#34;,&#34;0.999907059929403&#34;,&#34;0.9994838161730176&#34;,&#34;1.0000962236419397&#34;,&#34;1.0004931721027528&#34;,&#34;1.0001541324782575&#34;,&#34;1.000218091437778&#34;,&#34;1.0000775986106687&#34;,&#34;1.0001745233050123&#34;,&#34;0.9998284891927446&#34;,&#34;0.9992089913834684&#34;,&#34;1.0003350729355822&#34;,&#34;1.000837274076466&#34;,&#34;1.000174196146555&#34;,&#34;0.9998246186091285&#34;,&#34;0.9999456345235549&#34;,&#34;0.9996364141592559&#34;,&#34;1.0002967167854473&#34;,&#34;1.0001570627449197&#34;,&#34;0.999904577449903&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;135956333&#34;,&#34;btcPrice&#34;:&#34;0.000049889211529468&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5776721712&#34;,&#34;price&#34;:&#34;0.06256176177306583&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.45&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06235487176617015&#34;,&#34;0.06246245556557078&#34;,&#34;0.06240660740134105&#34;,&#34;0.0623051569646796&#34;,&#34;0.06218981455801479&#34;,&#34;0.06255572539146104&#34;,&#34;0.0628439660805138&#34;,&#34;0.06274927695509415&#34;,&#34;0.0627107369451555&#34;,&#34;0.06257675995151533&#34;,&#34;0.06246244963639836&#34;,&#34;0.06246648153200279&#34;,&#34;0.06255515010008444&#34;,&#34;0.0626855538363504&#34;,&#34;0.06269431118943376&#34;,&#34;0.06269622421769963&#34;,&#34;0.06271032651338038&#34;,&#34;0.06263147559996256&#34;,&#34;0.06255657870269374&#34;,&#34;0.06260234733818545&#34;,&#34;0.0626327865123358&#34;,&#34;0.06265965842332524&#34;,&#34;0.06259846428043739&#34;,&#34;0.0625527668144495&#34;,&#34;0.06255814071224475&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;466081385&#34;,&#34;btcPrice&#34;:&#34;0.00000312129136952&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5503321293&#34;,&#34;price&#34;:&#34;1362.397502144277&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.83&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.1540983542507&#34;,&#34;1350.9005820344698&#34;,&#34;1354.6594355436337&#34;,&#34;1358.5734173716921&#34;,&#34;1372.2393635736669&#34;,&#34;1375.4133500184457&#34;,&#34;1373.8416709111418&#34;,&#34;1374.2684069108268&#34;,&#34;1374.1400838469938&#34;,&#34;1371.4603171603485&#34;,&#34;1367.1477871246873&#34;,&#34;1364.9284617619362&#34;,&#34;1361.7201714566988&#34;,&#34;1361.1063241134766&#34;,&#34;1360.3248820272122&#34;,&#34;1366.892809174286&#34;,&#34;1371.6197874234629&#34;,&#34;1366.9159200066226&#34;,&#34;1362.8988600409152&#34;,&#34;1366.8689057181552&#34;,&#34;1362.432558815354&#34;,&#34;1363.6142123853183&#34;,&#34;1361.516713910733&#34;,&#34;1358.2861519471487&#34;,&#34;1359.081763092871&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;60613639&#34;,&#34;btcPrice&#34;:&#34;0.06797186403930881&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5414073497&#34;,&#34;price&#34;:&#34;6.971980114788267&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.33&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.77237184675032&#34;,&#34;6.752824244485618&#34;,&#34;6.78903586558007&#34;,&#34;6.852613624649713&#34;,&#34;6.922872589387299&#34;,&#34;6.9800437339156405&#34;,&#34;6.955259833823376&#34;,&#34;6.928956756162565&#34;,&#34;6.908183341801451&#34;,&#34;6.885823479955376&#34;,&#34;6.88302492770328&#34;,&#34;6.90951236907857&#34;,&#34;6.8662924076116925&#34;,&#34;6.832387980086888&#34;,&#34;6.8358287528435735&#34;,&#34;6.899610932300125&#34;,&#34;6.903413648605297&#34;,&#34;6.852584875134188&#34;,&#34;6.834124932563927&#34;,&#34;6.885688487328152&#34;,&#34;6.893482992926548&#34;,&#34;6.899689058136804&#34;,&#34;6.896256768869965&#34;,&#34;6.914609761551383&#34;,&#34;6.9343013341059585&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;181671673&#34;,&#34;btcPrice&#34;:&#34;0.000347841568779511&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5073965317&#34;,&#34;price&#34;:&#34;17.1362582942352&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.54&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.251404114211134&#34;,&#34;17.298879643442053&#34;,&#34;17.34808667709875&#34;,&#34;17.426941656132254&#34;,&#34;17.524712176181612&#34;,&#34;17.559899454169962&#34;,&#34;17.523659347405594&#34;,&#34;17.56377672754574&#34;,&#34;17.524960240775005&#34;,&#34;17.446353003633845&#34;,&#34;17.39331328781568&#34;,&#34;17.38090327063859&#34;,&#34;17.338426491525652&#34;,&#34;17.31874848940939&#34;,&#34;17.31874788822459&#34;,&#34;17.36905514019651&#34;,&#34;17.377346974392708&#34;,&#34;17.342553655687343&#34;,&#34;17.293655934579245&#34;,&#34;17.282071615104556&#34;,&#34;17.237339963653017&#34;,&#34;17.233044795101893&#34;,&#34;17.19067306889497&#34;,&#34;17.15822630767925&#34;,&#34;17.140672641632765&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;210839028&#34;,&#34;btcPrice&#34;:&#34;0.000854951229053915&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4904538777&#34;,&#34;price&#34;:&#34;20038.435620622542&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.26&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20049.66642497842&#34;,&#34;20092.89008901448&#34;,&#34;20156.31521210076&#34;,&#34;20228.25012076666&#34;,&#34;20291.50619456924&#34;,&#34;20351.79757539001&#34;,&#34;20336.52367461082&#34;,&#34;20376.3859154279&#34;,&#34;20335.913915665704&#34;,&#34;20261.657124758975&#34;,&#34;20210.790114424715&#34;,&#34;20191.615756843777&#34;,&#34;20154.36188290003&#34;,&#34;20132.073748759834&#34;,&#34;20147.171142671203&#34;,&#34;20214.145570074834&#34;,&#34;20203.167863028528&#34;,&#34;20116.131327302173&#34;,&#34;20015.300157602727&#34;,&#34;20068.49381930057&#34;,&#34;20057.021271217996&#34;,&#34;20102.828919149106&#34;,&#34;20073.861018847732&#34;,&#34;20038.403097690614&#34;,&#34;20038.08311468349&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;52193282&#34;,&#34;btcPrice&#34;:&#34;0.999744802395533&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4082597258&#34;,&#34;price&#34;:&#34;13.114687648013726&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.05&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.863612619895465&#34;,&#34;12.963444525296714&#34;,&#34;12.997678258298611&#34;,&#34;13.048598156795691&#34;,&#34;13.119145598919278&#34;,&#34;13.159252370152213&#34;,&#34;13.179334515109312&#34;,&#34;13.162812288821586&#34;,&#34;13.137523424001765&#34;,&#34;13.080422952609398&#34;,&#34;13.018181428331529&#34;,&#34;13.01816072627863&#34;,&#34;12.997563332431673&#34;,&#34;13.00040911300239&#34;,&#34;12.96103537416014&#34;,&#34;13.049347223483762&#34;,&#34;13.10883296707332&#34;,&#34;13.109861122849475&#34;,&#34;13.118013715638133&#34;,&#34;13.323369152698012&#34;,&#34;13.364068556649237&#34;,&#34;13.360583645725319&#34;,&#34;13.192765331800494&#34;,&#34;13.129317631598813&#34;,&#34;13.118222991495855&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;749708768&#34;,&#34;btcPrice&#34;:&#34;0.000654309600777872&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3937759115&#34;,&#34;price&#34;:&#34;15.64915348672489&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.02&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.57172097704591&#34;,&#34;15.554456620212141&#34;,&#34;15.531152169350191&#34;,&#34;15.556004685562852&#34;,&#34;15.616987172488637&#34;,&#34;15.741110499745083&#34;,&#34;15.721654408590974&#34;,&#34;15.754592996825584&#34;,&#34;15.721445252830843&#34;,&#34;15.68570643031886&#34;,&#34;15.65823383824178&#34;,&#34;15.65274198879639&#34;,&#34;15.638152113591332&#34;,&#34;15.64058447581103&#34;,&#34;15.628759017587337&#34;,&#34;15.757353975199504&#34;,&#34;15.773668660699586&#34;,&#34;15.735195225903052&#34;,&#34;15.72396624159747&#34;,&#34;15.715830909975708&#34;,&#34;15.643744434845082&#34;,&#34;15.660195060932544&#34;,&#34;15.658999022239795&#34;,&#34;15.655856778151282&#34;,&#34;15.654867179386539&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;17591161&#34;,&#34;btcPrice&#34;:&#34;0.000780757547966566&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3812919293&#34;,&#34;price&#34;:&#34;53.80516063162182&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.21&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.296108361372866&#34;,&#34;54.32415717238681&#34;,&#34;54.49439018324316&#34;,&#34;54.67152392574348&#34;,&#34;54.83000909463735&#34;,&#34;54.86255398531216&#34;,&#34;54.86130988251709&#34;,&#34;54.79707265341012&#34;,&#34;54.775144150456796&#34;,&#34;54.544338354633034&#34;,&#34;54.34839240630121&#34;,&#34;54.36453194625638&#34;,&#34;54.412236016477905&#34;,&#34;54.44769705538203&#34;,&#34;54.483256266826224&#34;,&#34;54.54506340505375&#34;,&#34;54.62803114302299&#34;,&#34;54.459797222345856&#34;,&#34;54.21787091912681&#34;,&#34;54.42668212343763&#34;,&#34;54.208931708912175&#34;,&#34;54.30377964719304&#34;,&#34;54.1510765896623&#34;,&#34;54.05333720555051&#34;,&#34;53.85039125291704&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;396687017&#34;,&#34;btcPrice&#34;:&#34;0.002684412630902247&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3292553913&#34;,&#34;price&#34;:&#34;24.665477602034645&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.15&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.686262825924107&#34;,&#34;24.708977698495474&#34;,&#34;24.76275391167715&#34;,&#34;24.88064501336108&#34;,&#34;24.989982623495205&#34;,&#34;25.02527690133806&#34;,&#34;25.03308663631069&#34;,&#34;25.096481543960365&#34;,&#34;25.064183863901825&#34;,&#34;24.97596757960783&#34;,&#34;24.905569462633494&#34;,&#34;24.89019154037575&#34;,&#34;24.8445613227375&#34;,&#34;24.8292849347889&#34;,&#34;24.84149925415407&#34;,&#34;24.952282814824464&#34;,&#34;24.932063335978345&#34;,&#34;24.822069539426963&#34;,&#34;24.733351334137495&#34;,&#34;24.785653785837024&#34;,&#34;24.76947017933385&#34;,&#34;24.784914942129383&#34;,&#34;24.73965728872184&#34;,&#34;24.690109754341304&#34;,&#34;24.66935385291404&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;46028479&#34;,&#34;btcPrice&#34;:&#34;0.001230594218934915&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3268898435&#34;,&#34;price&#34;:&#34;28.1042534488605&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.98&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.575456313117428&#34;,&#34;27.57803108679598&#34;,&#34;27.626107083587126&#34;,&#34;27.70394559563783&#34;,&#34;28.153092540695052&#34;,&#34;28.733080515456265&#34;,&#34;28.47990216316137&#34;,&#34;28.460572165061098&#34;,&#34;28.431061767116237&#34;,&#34;28.30996933550255&#34;,&#34;28.14880107797775&#34;,&#34;28.147232527457117&#34;,&#34;28.23587113396939&#34;,&#34;28.318610538497257&#34;,&#34;28.301077005756913&#34;,&#34;28.319715581518935&#34;,&#34;28.2863733832489&#34;,&#34;28.157107329408806&#34;,&#34;28.0337933743752&#34;,&#34;28.0347678850247&#34;,&#34;27.985651572532504&#34;,&#34;27.99967898622159&#34;,&#34;27.982387854306214&#34;,&#34;27.96664744200696&#34;,&#34;28.004800136899878&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;732390041&#34;,&#34;btcPrice&#34;:&#34;0.001402159422155137&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2704741771&#34;,&#34;price&#34;:&#34;148.74687260845832&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.73&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.0756556475053&#34;,&#34;146.16539235107626&#34;,&#34;146.17871227201726&#34;,&#34;146.7928043004359&#34;,&#34;147.49601518947418&#34;,&#34;147.78321950861786&#34;,&#34;148.13781758186698&#34;,&#34;149.1182492747765&#34;,&#34;148.11631640525192&#34;,&#34;146.22011551363667&#34;,&#34;145.48374160519077&#34;,&#34;145.4605505013132&#34;,&#34;145.1586337789315&#34;,&#34;145.01493067411195&#34;,&#34;145.03711128039956&#34;,&#34;145.49345796227092&#34;,&#34;145.02611908621574&#34;,&#34;144.61288004369027&#34;,&#34;144.03164405964102&#34;,&#34;144.07844173365186&#34;,&#34;143.9103757491713&#34;,&#34;143.993617802683&#34;,&#34;144.76695721516563&#34;,&#34;145.81285596759292&#34;,&#34;146.21974602320358&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;111782890&#34;,&#34;btcPrice&#34;:&#34;0.007421183747989439&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2463465853&#34;,&#34;price&#34;:&#34;0.3511650422184013&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.13&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.35156176000955314&#34;,&#34;0.3519023270261265&#34;,&#34;0.3528916179200212&#34;,&#34;0.35409161420668545&#34;,&#34;0.356162056262963&#34;,&#34;0.35693330326162703&#34;,&#34;0.3563907953585324&#34;,&#34;0.35750984328530744&#34;,&#34;0.35767252929986604&#34;,&#34;0.35751711842440254&#34;,&#34;0.3558727664559972&#34;,&#34;0.35502576789344964&#34;,&#34;0.35443443094387755&#34;,&#34;0.3542043091822441&#34;,&#34;0.35451487254498265&#34;,&#34;0.35595645150091704&#34;,&#34;0.3550166370140654&#34;,&#34;0.3532171781108639&#34;,&#34;0.3524588059359943&#34;,&#34;0.35338459261762273&#34;,&#34;0.3530591012387088&#34;,&#34;0.3519876831605432&#34;,&#34;0.35133779862985864&#34;,&#34;0.350369179522118&#34;,&#34;0.35078893949386675&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;122221360&#34;,&#34;btcPrice&#34;:&#34;0.000017520101488339&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2434108606&#34;,&#34;price&#34;:&#34;0.12046748494413159&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.13&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11889747925878968&#34;,&#34;0.11895767320851787&#34;,&#34;0.11904150834797811&#34;,&#34;0.11902199852210672&#34;,&#34;0.11927188129997995&#34;,&#34;0.1193386399802927&#34;,&#34;0.11934469276243408&#34;,&#34;0.1196520921041987&#34;,&#34;0.11983688261385989&#34;,&#34;0.11932664504934419&#34;,&#34;0.11894538588331029&#34;,&#34;0.1191377486726544&#34;,&#34;0.11883068387398256&#34;,&#34;0.11871457015480089&#34;,&#34;0.11869976708522932&#34;,&#34;0.11970212293120151&#34;,&#34;0.11966415505513138&#34;,&#34;0.11925782467280538&#34;,&#34;0.11953196796977514&#34;,&#34;0.11947862039947245&#34;,&#34;0.12001460511010423&#34;,&#34;0.12024648180408562&#34;,&#34;0.12015554671534558&#34;,&#34;0.12014362932061814&#34;,&#34;0.12018777537490634&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;268015695&#34;,&#34;btcPrice&#34;:&#34;0.000006010286641668&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2275339161&#34;,&#34;price&#34;:&#34;118.93218340005522&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.79&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.31669276815146&#34;,&#34;122.20221632323882&#34;,&#34;122.27062280612596&#34;,&#34;122.55422874145354&#34;,&#34;123.18638724378391&#34;,&#34;123.08308366724447&#34;,&#34;122.75420528237959&#34;,&#34;122.64408519732375&#34;,&#34;122.29556101291895&#34;,&#34;121.67236415586021&#34;,&#34;121.09760099075169&#34;,&#34;121.07402729292667&#34;,&#34;121.3308006968375&#34;,&#34;121.33543159737839&#34;,&#34;121.4165007079705&#34;,&#34;121.79251148020586&#34;,&#34;121.83878634048158&#34;,&#34;121.49073996107514&#34;,&#34;120.72111575922996&#34;,&#34;121.0116341886658&#34;,&#34;120.80463163491193&#34;,&#34;120.70155668283728&#34;,&#34;120.39286719656228&#34;,&#34;119.46060315102883&#34;,&#34;118.90781992190092&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;191687557&#34;,&#34;btcPrice&#34;:&#34;0.00593368835985329&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2256326310&#34;,&#34;price&#34;:&#34;20056.05558921233&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.33&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20062.922923808146&#34;,&#34;20068.861677407906&#34;,&#34;20151.07969183831&#34;,&#34;20194.09983970884&#34;,&#34;20305.40629467228&#34;,&#34;20343.061967792306&#34;,&#34;20336.436454110953&#34;,&#34;20366.199044829194&#34;,&#34;20353.223182216174&#34;,&#34;20294.402282813175&#34;,&#34;20238.157621291528&#34;,&#34;20222.48623264246&#34;,&#34;20158.081080167794&#34;,&#34;20150.098083292793&#34;,&#34;20140.151248718423&#34;,&#34;20189.026739752426&#34;,&#34;20223.043574030315&#34;,&#34;20141.500488887716&#34;,&#34;20003.562519895528&#34;,&#34;20060.755154122107&#34;,&#34;20033.23621927189&#34;,&#34;20092.4032138555&#34;,&#34;20103.168326479234&#34;,&#34;20047.78028200608&#34;,&#34;20049.12266475747&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;22599214&#34;,&#34;btcPrice&#34;:&#34;1.000452163550595&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2207285349&#34;,&#34;price&#34;:&#34;3.6313332745364115&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.41&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;3.676484006822928&#34;,&#34;3.6852601908489664&#34;,&#34;3.6962394641805405&#34;,&#34;3.703159890046674&#34;,&#34;3.7307432286844002&#34;,&#34;3.7313215421676786&#34;,&#34;3.7270747900297017&#34;,&#34;3.7312649322104274&#34;,&#34;3.719144760199497&#34;,&#34;3.6910824300924796&#34;,&#34;3.67193896045483&#34;,&#34;3.6718584377778054&#34;,&#34;3.681569582110444&#34;,&#34;3.682003775707856&#34;,&#34;3.6730232572401142&#34;,&#34;3.686482852048306&#34;,&#34;3.681889488410369&#34;,&#34;3.6602078142241883&#34;,&#34;3.646008662741072&#34;,&#34;3.6540159712077847&#34;,&#34;3.6514182366794388&#34;,&#34;3.6572356414722913&#34;,&#34;3.6510677534150116&#34;,&#34;3.6420121540385253&#34;,&#34;3.6369873371662327&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;165402487&#34;,&#34;btcPrice&#34;:&#34;0.000181172155138074&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2206824410&#34;,&#34;price&#34;:&#34;0.1097271300620471&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.11&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;0.10961438985623642&#34;,&#34;0.1098841249543377&#34;,&#34;0.11025473159449753&#34;,&#34;0.11062336581339045&#34;,&#34;0.11096926990753721&#34;,&#34;0.11112616986390883&#34;,&#34;0.11111054399289587&#34;,&#34;0.11123574172601472&#34;,&#34;0.11099926911576126&#34;,&#34;0.11063982901865921&#34;,&#34;0.11050965745439092&#34;,&#34;0.11045095222645547&#34;,&#34;0.11017549059501121&#34;,&#34;0.11016734688761708&#34;,&#34;0.11022026683815063&#34;,&#34;0.11068489829349991&#34;,&#34;0.11062776144990603&#34;,&#34;0.1103967719055346&#34;,&#34;0.1101055340281511&#34;,&#34;0.11021340607044186&#34;,&#34;0.11023448571177163&#34;,&#34;0.11038410371678713&#34;,&#34;0.1100857906587621&#34;,&#34;0.10978971382514593&#34;,&#34;0.10968147719562468&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;22257554&#34;,&#34;btcPrice&#34;:&#34;0.000005474435731321&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1913992789&#34;,&#34;price&#34;:&#34;0.000290403608018928&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.85&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297671672254111&#34;,&#34;0.000298963973156913&#34;,&#34;0.000301720935856393&#34;,&#34;0.000300113265231995&#34;,&#34;0.000298930284162236&#34;,&#34;0.000301416052150239&#34;,&#34;0.000303244352601534&#34;,&#34;0.000301825527661809&#34;,&#34;0.00030045732086974&#34;,&#34;0.000299635878097677&#34;,&#34;0.000296177179356234&#34;,&#34;0.000294359789811536&#34;,&#34;0.000296200844720792&#34;,&#34;0.000295887381729173&#34;,&#34;0.000296261248957328&#34;,&#34;0.00029695599789668&#34;,&#34;0.000296406217932157&#34;,&#34;0.000295000757723728&#34;,&#34;0.00029565516360448&#34;,&#34;0.000295593404968822&#34;,&#34;0.000294434193736599&#34;,&#34;0.000292263816481774&#34;,&#34;0.000290645791060663&#34;,&#34;0.000291875516993992&#34;,&#34;0.00029218728728002&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;74526330&#34;,&#34;btcPrice&#34;:&#34;1.448863091e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1808838364&#34;,&#34;price&#34;:&#34;1.8088383642082868&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.02&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8205505524134962&#34;,&#34;1.8242876171474678&#34;,&#34;1.8291343031327176&#34;,&#34;1.8320876869529952&#34;,&#34;1.839386569721581&#34;,&#34;1.834064344910821&#34;,&#34;1.8333753181908716&#34;,&#34;1.8376513295883161&#34;,&#34;1.840233968382716&#34;,&#34;1.8324791678774568&#34;,&#34;1.8232583602123347&#34;,&#34;1.8132643937437805&#34;,&#34;1.8119472585308702&#34;,&#34;1.8090163301680255&#34;,&#34;1.8060426601302288&#34;,&#34;1.8182680306522165&#34;,&#34;1.820594742691741&#34;,&#34;1.8152667672239315&#34;,&#34;1.8077629072924724&#34;,&#34;1.8199553421430261&#34;,&#34;1.8150270056970825&#34;,&#34;1.8112994257344677&#34;,&#34;1.8120289219530683&#34;,&#34;1.802734311661105&#34;,&#34;1.804570864355095&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;12129611&#34;,&#34;btcPrice&#34;:&#34;0.000090245405740645&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1768455076&#34;,&#34;price&#34;:&#34;1.7066734952451308&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.40&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6879637940199872&#34;,&#34;1.6907794219662977&#34;,&#34;1.6944343024351958&#34;,&#34;1.7026071417666502&#34;,&#34;1.7114262181583197&#34;,&#34;1.7143682061268322&#34;,&#34;1.7143997727258644&#34;,&#34;1.7187065908839465&#34;,&#34;1.7113103990166811&#34;,&#34;1.706894909097403&#34;,&#34;1.699364495550604&#34;,&#34;1.7008536378119747&#34;,&#34;1.6971201519957864&#34;,&#34;1.6933155308815548&#34;,&#34;1.6919551440844665&#34;,&#34;1.7002389743593525&#34;,&#34;1.6997584145254834&#34;,&#34;1.6903684560400438&#34;,&#34;1.6857952597429327&#34;,&#34;1.7013464274735857&#34;,&#34;1.7011609882478398&#34;,&#34;1.7066497944706445&#34;,&#34;1.7038258896228677&#34;,&#34;1.699099958838675&#34;,&#34;1.7039657259463465&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;96184516&#34;,&#34;btcPrice&#34;:&#34;0.000085148261499094&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1721646846&#34;,&#34;price&#34;:&#34;17.216468455023016&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.77&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.081778286859773&#34;,&#34;17.067893912066662&#34;,&#34;17.159396834446234&#34;,&#34;17.409304028654628&#34;,&#34;17.350424599499906&#34;,&#34;17.386714429272285&#34;,&#34;17.38858738165633&#34;,&#34;17.59776912523738&#34;,&#34;17.615975294855826&#34;,&#34;17.448303583422675&#34;,&#34;17.32282156665203&#34;,&#34;17.45217875290083&#34;,&#34;17.3201524697605&#34;,&#34;17.37188836117317&#34;,&#34;17.34961857367158&#34;,&#34;17.39732106885539&#34;,&#34;17.40479905360241&#34;,&#34;17.35216582547696&#34;,&#34;17.40256516285308&#34;,&#34;17.566927968143226&#34;,&#34;17.41304480399479&#34;,&#34;17.3605187617024&#34;,&#34;17.153359676722275&#34;,&#34;17.24576945727861&#34;,&#34;17.266518018674518&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;19824373&#34;,&#34;btcPrice&#34;:&#34;0.00085895302304947&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1629847419&#34;,&#34;price&#34;:&#34;5.545448462680433&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.51&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.564490867810681&#34;,&#34;5.566111951296787&#34;,&#34;5.573081005993705&#34;,&#34;5.597638107569036&#34;,&#34;5.622372212071733&#34;,&#34;5.621678478547102&#34;,&#34;5.635046338359381&#34;,&#34;5.636819831411602&#34;,&#34;5.621680148394719&#34;,&#34;5.606495156648643&#34;,&#34;5.592319378976973&#34;,&#34;5.593133992474709&#34;,&#34;5.578979507838225&#34;,&#34;5.57060347855348&#34;,&#34;5.56988332957902&#34;,&#34;5.585637764164166&#34;,&#34;5.587779222544867&#34;,&#34;5.569394483098339&#34;,&#34;5.555860681648574&#34;,&#34;5.5657058777971935&#34;,&#34;5.560079505677699&#34;,&#34;5.556640885063307&#34;,&#34;5.544057534440066&#34;,&#34;5.539256395617048&#34;,&#34;5.542528306381236&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;138346991&#34;,&#34;btcPrice&#34;:&#34;0.000276669964785645&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579483455&#34;,&#34;price&#34;:&#34;6.014622469643834&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.017430234811706&#34;,&#34;6.02397822813975&#34;,&#34;6.026022506481912&#34;,&#34;6.036706330465778&#34;,&#34;6.0617952393602765&#34;,&#34;6.082059364245906&#34;,&#34;6.119003490105678&#34;,&#34;6.121522161601521&#34;,&#34;6.114804820768077&#34;,&#34;6.099161118790063&#34;,&#34;6.060918970841281&#34;,&#34;6.056658651875394&#34;,&#34;6.04440103957183&#34;,&#34;6.040821790391322&#34;,&#34;6.031174470833535&#34;,&#34;6.049477994019767&#34;,&#34;6.05426717892797&#34;,&#34;6.041379962293601&#34;,&#34;6.029851672781251&#34;,&#34;6.029558427355942&#34;,&#34;6.0311271218149605&#34;,&#34;6.046335431217927&#34;,&#34;6.041224463133169&#34;,&#34;6.044501108247701&#34;,&#34;6.026325410969371&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;46512222&#34;,&#34;btcPrice&#34;:&#34;0.000300077693999697&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1572320794&#34;,&#34;price&#34;:&#34;0.02355157781586008&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.78&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.0237503648773653&#34;,&#34;0.023780799909472596&#34;,&#34;0.023856466417581195&#34;,&#34;0.02395339578538322&#34;,&#34;0.024027726003664374&#34;,&#34;0.02406287804956785&#34;,&#34;0.024029150650035552&#34;,&#34;0.02403165474416971&#34;,&#34;0.024007492514989702&#34;,&#34;0.023892749313038426&#34;,&#34;0.0237918988352485&#34;,&#34;0.02383663125658556&#34;,&#34;0.023815944952803175&#34;,&#34;0.02375987595684638&#34;,&#34;0.023747958190055547&#34;,&#34;0.023865382445108305&#34;,&#34;0.023886060705063935&#34;,&#34;0.023777291343685534&#34;,&#34;0.023683636546103736&#34;,&#34;0.023735592242398316&#34;,&#34;0.02368280508302678&#34;,&#34;0.02367337299793166&#34;,&#34;0.023608947936034432&#34;,&#34;0.023559309178789255&#34;,&#34;0.023545909556068136&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;117681089&#34;,&#34;btcPrice&#34;:&#34;0.000001175020243865&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1556441781&#34;,&#34;price&#34;:&#34;4.679829633557056&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.41&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.661700930843492&#34;,&#34;4.662153786655901&#34;,&#34;4.669629519650637&#34;,&#34;4.6965206988350126&#34;,&#34;4.729693628603321&#34;,&#34;4.7140657358610465&#34;,&#34;4.72362675311866&#34;,&#34;4.726446209779176&#34;,&#34;4.717613624950668&#34;,&#34;4.704697941989018&#34;,&#34;4.698207502891328&#34;,&#34;4.7021832565717405&#34;,&#34;4.692520565338738&#34;,&#34;4.678139048018588&#34;,&#34;4.690446866999542&#34;,&#34;4.720676195685006&#34;,&#34;4.723733692086486&#34;,&#34;4.711911967477252&#34;,&#34;4.721038716505375&#34;,&#34;4.7278197954085766&#34;,&#34;4.7261855548331395&#34;,&#34;4.730859273583328&#34;,&#34;4.724423267167681&#34;,&#34;4.721094329268203&#34;,&#34;4.698009240688784&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;45667758&#34;,&#34;btcPrice&#34;:&#34;0.000233483064288224&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1535839449&#34;,&#34;price&#34;:&#34;0.700177411016985&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.28&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.701977034723851&#34;,&#34;0.7011237829156313&#34;,&#34;0.7022081935423256&#34;,&#34;0.704347215334535&#34;,&#34;0.7057336965233337&#34;,&#34;0.7090636534769581&#34;,&#34;0.7106615358646469&#34;,&#34;0.7109962681888046&#34;,&#34;0.7099719076767776&#34;,&#34;0.7082023207228123&#34;,&#34;0.7050468491660892&#34;,&#34;0.7072911038373654&#34;,&#34;0.7052069405945084&#34;,&#34;0.7045672897680095&#34;,&#34;0.7039823074677339&#34;,&#34;0.7064319311458693&#34;,&#34;0.7061251224914128&#34;,&#34;0.7035537471979324&#34;,&#34;0.70119909731761&#34;,&#34;0.7012006334450854&#34;,&#34;0.700378912113366&#34;,&#34;0.7006616578748375&#34;,&#34;0.7002263140262767&#34;,&#34;0.7005970156301706&#34;,&#34;0.7000471371939851&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;181028008&#34;,&#34;btcPrice&#34;:&#34;0.000034932803172449&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1528710252&#34;,&#34;price&#34;:&#34;0.764355126097645&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.84&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7863788485157178&#34;,&#34;0.7855541947236996&#34;,&#34;0.7859794469303182&#34;,&#34;0.7910897411189671&#34;,&#34;0.793054017744364&#34;,&#34;0.7920608982909317&#34;,&#34;0.7932732662277912&#34;,&#34;0.7937358349094242&#34;,&#34;0.7899013972015532&#34;,&#34;0.7873715826948282&#34;,&#34;0.7828939261430061&#34;,&#34;0.7830596769363658&#34;,&#34;0.781549984261565&#34;,&#34;0.7776641064358721&#34;,&#34;0.774477413274178&#34;,&#34;0.7796249547306316&#34;,&#34;0.7785003478970451&#34;,&#34;0.7744517162811705&#34;,&#34;0.7716980943097198&#34;,&#34;0.7718465182090138&#34;,&#34;0.7695939089125774&#34;,&#34;0.7675475383081616&#34;,&#34;0.7659261335369044&#34;,&#34;0.7647132288808262&#34;,&#34;0.7647155542326465&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;59830761&#34;,&#34;btcPrice&#34;:&#34;0.00003813471664994&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1413343448&#34;,&#34;price&#34;:&#34;0.058052505411859745&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.60&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.057704389710771006&#34;,&#34;0.057720764112458633&#34;,&#34;0.05789434173084646&#34;,&#34;0.05809746344437125&#34;,&#34;0.058189441306718125&#34;,&#34;0.05837589581493919&#34;,&#34;0.058390643995986855&#34;,&#34;0.05842359197073168&#34;,&#34;0.058297064663280294&#34;,&#34;0.05820470132737367&#34;,&#34;0.05807440260764427&#34;,&#34;0.05815803410400219&#34;,&#34;0.05809704013369458&#34;,&#34;0.05804303598748368&#34;,&#34;0.05807196376127004&#34;,&#34;0.05825313502134361&#34;,&#34;0.05829341549445707&#34;,&#34;0.05821978196200451&#34;,&#34;0.05798861981613355&#34;,&#34;0.05802915704007855&#34;,&#34;0.05803221909522417&#34;,&#34;0.05809617434017486&#34;,&#34;0.05803719408534143&#34;,&#34;0.05798158873479129&#34;,&#34;0.05799300122328515&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;43752405&#34;,&#34;btcPrice&#34;:&#34;0.000002896318437744&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1360008693&#34;,&#34;price&#34;:&#34;1.0014307404744005&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.12&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;1.0000268231187786&#34;,&#34;0.9993388779781252&#34;,&#34;0.9994407930086252&#34;,&#34;0.9986229045501516&#34;,&#34;0.9990744412957507&#34;,&#34;0.9990768091269389&#34;,&#34;0.999533163749183&#34;,&#34;0.9992798589768088&#34;,&#34;0.9998864958466837&#34;,&#34;1.0002316433678111&#34;,&#34;0.9997435605750601&#34;,&#34;0.9999510736256771&#34;,&#34;0.9995877887400998&#34;,&#34;0.999783294319345&#34;,&#34;0.9993800980597954&#34;,&#34;0.9989024781788758&#34;,&#34;1.0002727567604988&#34;,&#34;1.0007528006058746&#34;,&#34;0.9996998053122591&#34;,&#34;0.999539311284952&#34;,&#34;0.9995986423076254&#34;,&#34;0.9991918993229284&#34;,&#34;0.9999917500713156&#34;,&#34;0.999743821552415&#34;,&#34;1.0010968947138141&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;7124767&#34;,&#34;btcPrice&#34;:&#34;0.00004996274143866&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1352742654&#34;,&#34;price&#34;:&#34;138.35634673022093&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.10&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.86641854250846&#34;,&#34;137.61943864188262&#34;,&#34;138.02288004406574&#34;,&#34;138.71450262820792&#34;,&#34;139.15753412769195&#34;,&#34;139.0288846982766&#34;,&#34;139.1402037166419&#34;,&#34;138.93629469593716&#34;,&#34;138.16451460952393&#34;,&#34;137.36487381286946&#34;,&#34;137.47323036753917&#34;,&#34;139.47069461255214&#34;,&#34;138.96967914045058&#34;,&#34;139.3198390416663&#34;,&#34;139.64725230463458&#34;,&#34;140.750058199524&#34;,&#34;139.82120238160806&#34;,&#34;139.62012734518615&#34;,&#34;139.11349157404445&#34;,&#34;139.65833844203283&#34;,&#34;139.23347469831282&#34;,&#34;139.1817083994535&#34;,&#34;138.8991730119048&#34;,&#34;138.13998261945733&#34;,&#34;138.13266569202622&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;34365668&#34;,&#34;btcPrice&#34;:&#34;0.006902786282359267&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1306510109&#34;,&#34;price&#34;:&#34;55.29726372307632&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.38&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.53200689084205&#34;,&#34;54.12891435002389&#34;,&#34;54.19623024858422&#34;,&#34;54.633815523213606&#34;,&#34;55.27290146147566&#34;,&#34;55.13168195216286&#34;,&#34;55.385084460868484&#34;,&#34;55.204117457272815&#34;,&#34;55.02695582682979&#34;,&#34;54.88507503357054&#34;,&#34;54.61644563280285&#34;,&#34;54.70849443349061&#34;,&#34;55.03535127585458&#34;,&#34;55.12708543041666&#34;,&#34;55.12441377248144&#34;,&#34;55.100996636927164&#34;,&#34;55.0414585858571&#34;,&#34;54.89583474520678&#34;,&#34;54.830907515321&#34;,&#34;55.07520330106215&#34;,&#34;55.35219440814218&#34;,&#34;55.0085050792647&#34;,&#34;54.82982283174939&#34;,&#34;54.94795813298924&#34;,&#34;55.073705982029324&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;101315795&#34;,&#34;btcPrice&#34;:&#34;0.002758855683172492&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1299027273&#34;,&#34;price&#34;:&#34;1.4303529448198662&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.40&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.422154065982087&#34;,&#34;1.4244295761005363&#34;,&#34;1.4277505791732141&#34;,&#34;1.4331687835452782&#34;,&#34;1.443452302749013&#34;,&#34;1.44654853894898&#34;,&#34;1.4430883131864&#34;,&#34;1.4486591676627363&#34;,&#34;1.4453351430074377&#34;,&#34;1.4406990621963756&#34;,&#34;1.4357528630214837&#34;,&#34;1.4364879120875458&#34;,&#34;1.4341300033627156&#34;,&#34;1.433556473760653&#34;,&#34;1.4327812160186728&#34;,&#34;1.438628684956135&#34;,&#34;1.4388288665247424&#34;,&#34;1.4322711706987314&#34;,&#34;1.4239909372154902&#34;,&#34;1.4246489366303339&#34;,&#34;1.4219137536482624&#34;,&#34;1.4281196230913553&#34;,&#34;1.431206588730244&#34;,&#34;1.4310841397804643&#34;,&#34;1.4307637472117907&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;42631922&#34;,&#34;btcPrice&#34;:&#34;0.000071362253483657&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281908888&#34;,&#34;price&#34;:&#34;0.21577787378252844&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.51&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.2156861139378023&#34;,&#34;0.21533849342523834&#34;,&#34;0.21637084202032117&#34;,&#34;0.2172780853626793&#34;,&#34;0.2185663393777442&#34;,&#34;0.21930091082116046&#34;,&#34;0.21987321663135242&#34;,&#34;0.21925549598692895&#34;,&#34;0.218446742092016&#34;,&#34;0.21799923484351233&#34;,&#34;0.21702029272708792&#34;,&#34;0.2161097068576463&#34;,&#34;0.2157993116882586&#34;,&#34;0.21590901819560568&#34;,&#34;0.21566164758114145&#34;,&#34;0.21624178021000806&#34;,&#34;0.215892046849503&#34;,&#34;0.21496977646657472&#34;,&#34;0.21502311258804033&#34;,&#34;0.21704355142688964&#34;,&#34;0.21765173879422026&#34;,&#34;0.2168903690807956&#34;,&#34;0.2161411090221284&#34;,&#34;0.21595613155613003&#34;,&#34;0.2160416191418896&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;300782991&#34;,&#34;btcPrice&#34;:&#34;0.000010765451548724&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273569087&#34;,&#34;price&#34;:&#34;0.8493460426374936&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.48&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8593672603083095&#34;,&#34;0.8592673257045527&#34;,&#34;0.8609659832018245&#34;,&#34;0.8648971108758887&#34;,&#34;0.8663731911826474&#34;,&#34;0.8667122213039231&#34;,&#34;0.8663886523811145&#34;,&#34;0.8668792238690509&#34;,&#34;0.8649624385349067&#34;,&#34;0.8611180516082279&#34;,&#34;0.8585412818383397&#34;,&#34;0.8661515489489221&#34;,&#34;0.8593039298345546&#34;,&#34;0.8547774111127597&#34;,&#34;0.8526806084120415&#34;,&#34;0.8563535288027431&#34;,&#34;0.8564092645541592&#34;,&#34;0.8530767457147056&#34;,&#34;0.8502167147455565&#34;,&#34;0.8516834566430094&#34;,&#34;0.8511666186198831&#34;,&#34;0.8510769601275632&#34;,&#34;0.8485446381486353&#34;,&#34;0.8475518785122093&#34;,&#34;0.8480963950511211&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;88280834&#34;,&#34;btcPrice&#34;:&#34;0.000042375029051079&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1214419931&#34;,&#34;price&#34;:&#34;1.509867291755627&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.48&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.5152205100915535&#34;,&#34;1.5169429140699267&#34;,&#34;1.52442883963002&#34;,&#34;1.5352051807886449&#34;,&#34;1.5507771914692972&#34;,&#34;1.5584198947059793&#34;,&#34;1.5611709741306992&#34;,&#34;1.5622734158186&#34;,&#34;1.563158380319883&#34;,&#34;1.5530023128237487&#34;,&#34;1.5394541532334183&#34;,&#34;1.5415345344528264&#34;,&#34;1.5397346514776398&#34;,&#34;1.5529429534884351&#34;,&#34;1.5579757035793522&#34;,&#34;1.560667950492334&#34;,&#34;1.5577382798650414&#34;,&#34;1.54511103614271&#34;,&#34;1.527483697189044&#34;,&#34;1.5299531579297556&#34;,&#34;1.5250857787869663&#34;,&#34;1.5243751296124086&#34;,&#34;1.5162105499958185&#34;,&#34;1.5081580664187493&#34;,&#34;1.505515094483018&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;9393011&#34;,&#34;btcPrice&#34;:&#34;0.00007532933237993&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1157005829&#34;,&#34;price&#34;:&#34;1.1704482714528321&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.09&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1694363470738518&#34;,&#34;1.1705864439187568&#34;,&#34;1.1738525342149835&#34;,&#34;1.178558922119085&#34;,&#34;1.1837969319466126&#34;,&#34;1.1858090386610416&#34;,&#34;1.1862130969952875&#34;,&#34;1.1884443612524698&#34;,&#34;1.1872550267419892&#34;,&#34;1.1834269966357152&#34;,&#34;1.1774580582186247&#34;,&#34;1.176233833106269&#34;,&#34;1.1771650081760523&#34;,&#34;1.1771210586603023&#34;,&#34;1.1806485771743869&#34;,&#34;1.1831210652488116&#34;,&#34;1.182431907948135&#34;,&#34;1.1787638124236466&#34;,&#34;1.1765484036088025&#34;,&#34;1.177234556211267&#34;,&#34;1.1757269076583845&#34;,&#34;1.1752701437192155&#34;,&#34;1.1731499477132676&#34;,&#34;1.1704139722460736&#34;,&#34;1.169172194454326&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;259725164&#34;,&#34;btcPrice&#34;:&#34;0.000058395255897798&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://rapidapi.com/primisign-pBrt_l-Weeu/api/pquotes&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;618474c20emshb969af58dc7ea8fp142551jsn4e58bb034dc2&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://kcabralomana.github.io/Fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? count = input(&quot;How many items do you want?&quot;) i = 0 print(&quot;Your order&quot;) while i &lt; int(count): item = input(&quot;Please select from the menu&quot;) total = total + menu[item] print(item) i += 1 #ideally the code should prompt the user multiple times #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 Your order burger fries 5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://kcabralomana.github.io/Fastpages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Program Design and Development Unit 1.3",
            "content": "Program Design and Development . Video 1: . Computer programs are developed with a systematic approach to meet design elements. starts with an idea | follow specific steps and stick to a plan | . | Dev Process can be ordered and intentional or exploratory. Phases of the dev process include: investigating/reflecting | designing | prototyping | testing | . | Developers must determine the program requirements and constraints | revisiting earlier phases of the process allows refinement and revision based on feedback and testing | Break down your problem/coding process into numerous pieces and make sure each piece works before combining the program as a whole. | investigation is useful to identify the program constraints and concerns for the user. Collecting data with survey | user testing | interviews | Direct Observations | . | Program requirements describe user interactions and program functions include user interactions and create an outline of them | . | Design phase of development outlines how they will accomplish a given program goal/specification brainstorming | planning and creating a storyboard | organizing the program into modules and functional components | creation of diagrams that represent the layouts of the user interface | dev of a testing strategy for the program. | . | . Video 2: . Programs are developed by groups of people and are expanded upon by individuals. Rarely developed solely by a single individual. (teams are more common) | Individuals work on a specific component of the program or code segment. Each member of a team should receive credit in the documentation of the program | . | . | Always acknowledge when you are using a code segment from an outside source. Do this by writing the original authors name in the program documentation. | Some languages have the ability to leave a comment within the code, to give credit. comments make it easy to find out who is responsible to fix a specific problem | After the program is completed, you can find additional bugs. | . | . | Sometimes developers use code segments, procedures, algorithms that were written by others. Even if they are not part of the project, they deserve credit, because it is considered intellectual property. | Documentation of contributors resembles a works cited list. | . | . Video 3: . Programs use comments and documentation to explain the purpose of their programs to themselves and others | Program documentation is a written description of a function of a code segment, event, procedure, or program and how it was developed. Describe the overall program specifications, its development, how other programs interact with yours, and the contributors. | . | You Should document your program throughout the development At the beginning, list specifications | During, keep track of your progress | After, explain the overall process | . | Documentation helps maintain correct programs, so you can easily review what you or collaborators did. Improves efficiency, and ability to test and refine your program. | . | If there is no comment feature in the language, you have to get creative Comments allow programmers to write text within the program, does not affect the program. | Python: # is a comment | Java: // is a single line comment, /* is multiple line, /** documentation comments | Javascript, C++, Swift use the same as java | HTML and XML use &lt;!””!&gt; | . | . Completed Program Design and Development Video Quiz: . .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/10/02/unit-1.3-notes.html",
            "relUrl": "/markdown/2022/10/02/unit-1.3-notes.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Program Function and Purpose Unit 1.2",
            "content": "Program Function and Purpose Notes . Video #1 . Programs are developed with a purpose (solve problems) | Innovation categories Applications (games) | Systems (email) | Physical Devices (gaming consoles, phones) | . | Being able to understand the purpose of a program is essential to improve a programmers ability to improve the function. | . Video #2 . Programs inputs are date sent to computers for processing by the program | Events are associated with an action and supplies input data to a program | Events are generated by a defined action | Program statements are executed when triggered | Program output is data sent from a programs input to a device in the form of visual/text/audio | . Video #3 . Program is a collection of statements that perform a task when run (software) | A code segment is a collection of code statements, according to the rules of a programming language To describe it: Simply state what the segment does, so someone else can use it without reading the whole thing | . | A program must work for a variety of inputs and situations | The behavior of a program is how a program functions during its execution (how a user interacts with it) | Programs are described by what the program does and how its statements accomplish the function. | . Program Function and Purpose of my teams final project . Do we have final project ideas for a PBL Web Project? . | .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/09/25/unit-1.2-notes.html",
            "relUrl": "/markdown/2022/09/25/unit-1.2-notes.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Scrum Project Idea",
            "content": "Purpose . Our plan is to make a platform, called Striver, where peoples are able to track their own personal goals and be able to check on the goals of their peers. Essentially our website would operate like a social media site for motivation and self gain. . Planning . We decided to plan this by contributing on a google drawing to get an idea of how we will attack this idea. We decided to also meet up with each other over the week end so that we can collaborate on a more intimate level so we could effectively share our ideas. . . Goal . In the end we hope to come up with a good looking website that will allow the community to post about their goals for the near future and keep tabs on their friends and peers on their own goals . . My roles . With my role as the frontend operator I plan to take care of the asthetics of our website. I will ensure the functionality of our project and make sure all aspects are up to standards and work in a practical way. I will ensure an easy to understand and operational website that users will be able to function on. .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/09/25/scrum-project-idea.html",
            "relUrl": "/markdown/2022/09/25/scrum-project-idea.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Random Number Generator",
            "content": "Click to Generate Number . The Number Will Appear Here .",
            "url": "https://kcabralomana.github.io/Fastpages/randomnum",
            "relUrl": "/randomnum",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Personal Usage of Jupyter JavaScript kernel",
            "content": "Using JavaScript for math . Math.max(x, y) method . used to find highest value of x and y | . Math.max(5, 10); . 10 . Math.min (x, y) method . used to find highest value of x and y | . Math.min(5, 10); . 5 . Math.round(x) method . used to round x to the closest integer | . Math.round(5.7) . 6 . Math.pow(x, y) method . used to take x to the power of y | . Math.pow(5, 3) . 125 . Math.sqrt(x) method . used to take the square root of x | . Math.sqrt(16) . 4 . Math.abs(x) method . used to take the absolute value of x | . Math.abs(-9) . 9 .",
            "url": "https://kcabralomana.github.io/Fastpages/personaluse",
            "relUrl": "/personaluse",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . console.log command outputs the parameter to the console, so that you can see it in the Jupyter document. . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . var msg = &quot;Hello, Kalani!&quot;; console.log(msg); . Hello, Kalani! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . function logIt(output) { console.log(output); } logIt(&quot;yo&quot;); . yo . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, don&#39;t have to specify what type of information will be stored in a variable in advance. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;dynamic nature of types in JavaScript&quot;) logItType(&quot;hello bro&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . dynamic nature of types in JavaScript string ; hello bro number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Group object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data | Definition of a prototype allow for the definition of a method associated with the function | Instance of a function | . // define a function to hold data for a Person function Person(name, sport, age) { this.name = name; this.sport = sport; this.age = age; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, sport: this.sport, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var thegoat = new Person(&quot;Kalani&quot;, &quot;soccer&quot;, 16); thegoat.setRole(&quot;GOAT&quot;); // output of Object and JSON/string associated with Teacher logItType(thegoat); // object type is easy to work with in JavaScript logItType(thegoat.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Kalani&#39;, sport: &#39;soccer&#39;, age: 16, role: &#39;GOAT&#39; } string ; {&#34;name&#34;:&#34;Kalani&#34;,&#34;sport&#34;:&#34;soccer&#34;,&#34;age&#34;:16,&#34;role&#34;:&#34;GOAT&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Navan&quot;, &quot;football&quot;, 15), new Person(&quot;Alex&quot;, &quot;basketball&quot;, 16), new Person(&quot;Safin&quot;, &quot;tennis&quot;, 16), ]; // define a classroom and build Classroom objects and json function Classroom(thegoat, students){ // 1 teacher, many student // start Classroom with Teacher thegoat.setRole(&quot;GOAT&quot;); this.thegoat = thegoat; this.classroom = [thegoat]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(thegoat, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Kalani&#39;, sport: &#39;soccer&#39;, age: 16, role: &#39;GOAT&#39; }, Person { name: &#39;Navan&#39;, sport: &#39;football&#39;, age: 15, role: &#39;Student&#39; }, Person { name: &#39;Alex&#39;, sport: &#39;basketball&#39;, age: 16, role: &#39;Student&#39; }, Person { name: &#39;Safin&#39;, sport: &#39;tennis&#39;, age: 16, role: &#39;Student&#39; } ] string ; Kalani string ; {&#34;name&#34;:&#34;Kalani&#34;,&#34;sport&#34;:&#34;soccer&#34;,&#34;age&#34;:16,&#34;role&#34;:&#34;GOAT&#34;} object ; { name: &#39;Kalani&#39;, sport: &#39;soccer&#39;, age: 16, role: &#39;GOAT&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render. | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Sport&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.sport + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameSportageRole . Kalani | soccer | 16 | GOAT | Navan | football | 15 | Student | Alex | basketball | 16 | Student | Safin | tennis | 16 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://kcabralomana.github.io/Fastpages/javatut",
            "relUrl": "/javatut",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Collaboration Unit 1.1",
            "content": "Collaboration Notes . The importance of collaboration . Multiple perspectives working together to find a better solution | Improves communication skills | Improves productivity and a chance to learn from one another | . Super Mario Example . Kensuke and Tanabe and Shigeru Miyambo worked together to make both games (collaborating) | Tanabe was level designer while Miyamoto was director (different roles in a team) | Collaboration between the two was able to make a good game including both of their talents and perspectives | . How to Collaborate . Pair programming Two Programmers work together as a pair. One writes the program while the other obeserves and navigates (reviews code as its typped in) | . | Think-Pair-Share Students think through a problem alone, pair with a partner to share ideas and they form a result to share with class | . | Collaboration tools Github (collaborate with repos), peer testing and feedback, shared documents and folders, repl.it (code together in same workspace) | . | .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/09/19/collaboration-notes.html",
            "relUrl": "/markdown/2022/09/19/collaboration-notes.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Focus Habits and Gratitude",
            "content": "“Psychology and the Good Life” Notes and Insights . Insight #1: We can improve our well-being . The first insight that I took away from the video was controlling our well-being. I never knew how much control over our well-being we actually had. In a study talked about in the video, she states that around 50% of our well-being is determined by our genes. This means that people have the chance to control their well-being around half the time and affect their lives in a positive way . Insight #2: Stop worrying about the little things in life . Another insight I had while watching the video was how life circumstances don’t really affect our lives as much as we think. She talks about how these short instances in our life may affect our happiness present time when it happens but later on it takes zero control on our well-being. What we usually think will make us happy doesn’t make us as happy as we would think. . Insight #3: The importance of being with other people . In the video she mentions how happy people spend their time. It is discovered that happy people tend to spend their time around other while more unhappy people would rather spend their time alone and away from others and social interaction. She mentions a study where people that were put into a situation where they had to connect with strangers for a long period of time and they measured that their overall well being was more positive than the people that were stuck in solitary. . Insight #4: The importance of good deeds and helping other . Happy people tend to spend their time to help others. She mentions how treating and helping others has a greater affect on a persons well-being than it would if a person were to treat themselves. She mentions a study where people were given money to either help themselves or help other and the study shows that the people that helped others were significantly more happy in the end than the people that helps themselves. . Insight #5: Be present in the moment . In the video she talks about realizing what you are doing and focusing is important for you well-being. It also means taking time to realize you gratitude and what it really means to be where you are presently in that moment. . Gratitude List . Parents | Friends | Family | Community | Teammates | Coaches | Teachers | . Goals . Work on my well-being and mentality everyday | Get enough sleep | Being healthy | Be kind to others | Spread love | . Own Self Study . After we watched the video we decided to take our only little survey to see how school can affect students well-being here at Del Norte. . Below are some of the questions we asked and results that we recieved . Stress Levels . . As you can see by the data received from the students there is an incredibly high peak at the higher stress levels. Students are stressed out due to many factors that should be addressed. . Anxiety Levels . . We can see that there is a bell shaped curve residing around a level 4 anxiety. This may indicate that students aren’t too stressed out to have high anxiety but stressed out enough to relatively still have high anxiety. . Effect of homework . . As we can see by this pie chart a majority of students are overwhelmed by their homework whether it be the amount of homework or the difficulty of it. . Loneliness . . We can see that around two thirds of students that answered this survey responded yes to being lonely. This may suggest unhappy students to to social interactions and connections being important to a persons happiness. . Takeaway . From this little study we conducted as a team we were able to conclude that school does take a toll on the students mental health. But it is more about how the student handles it. The student may be able to handle everything and not be overwhelmed by work but did they answer yes on feeling lonely if that was the case. This survey gave us the chance to analyze students well-being while relating it to the video of the Psychology of a Good Life. .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/09/15/phychology-and-the-good-life.html",
            "relUrl": "/markdown/2022/09/15/phychology-and-the-good-life.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Performance Task",
            "content": "Create Performance Task Draft . Baseball Statistics Generator . Creative Homepage welcoming user to generator with multiple ways to navigate throughout the generator | May be a page to enter players statistics/ a user can enter personal bests | Search tool so that a user can find other users and find their personal bests and other various statistics | Comparing page that will allow users to compare themselves with other users | Comparing other users to other users based on certain statistics and positions | . Program Purpose and Function . I will need to demonstrate a program that can take an input, possibly the user inputting their statistics. I will need to establish what the inputs and the outputs are and what the program is trying to achieve. . Data Abstraction . I will have to create a data structure to store data an then sue that data. I will have to describe how the list’s data would be used for in the program. I could possibly use the statistics that users inputted. . Managing Complexity . Using Lists from a dictionary of traits and statistics of users. I will use a list to help reduce complexity. . Procedural Abstraction . A procedure will be identified in the program, retrieving data from statistics of users, which contributes to the functionality of the program, storing statistics of users to be compared to each other. . Algorithm Implementation . I am not quite sure yet on how I will use sequencing and selection. But I may use iteration in my program by loops when outputing user statistics for each user. . Testing . Display the use of the program and how to navigate through the generator. Inputing statistics and searching for other user, also comparing different users. .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/week%203/2022/09/11/performance-task.html",
            "relUrl": "/markdown/week%203/2022/09/11/performance-task.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "AppLab Notes",
            "content": "AppLab Notes . Padres Quiz . 1 Program purpose) Purpose to test users knowledge about the Padres 2 Data abstraction) I set a variable called correct to 0 and as the user enter correct answers it would add to that variable giving a final score in the end. 3 managing complexity) I was not able to implement this my own function. 4 procedural abstraction) I was not able to implement my own function. 5 algorithm implementation) I used if statements to change an image to a smiley face or a sad face depending on how many question were answered correct. 6 testing) I used console.log to see if everything worked orderly. . Design Process . When we first started with Code.org we decided to plan out what we were going to make our quizzes about. Eventually we decided for one of us to do a Countries Quiz and the other do a Padres Quiz. For the Padres Quiz which is what I decided to create, I decided to have 3 different questions, 2 MC, and 1 free response. I decided to include a Main Screen, How to Play, Questions (1-3), and a Final screen. . Successes . I had a few successes through coding my apps in Code.org. I found success in being able to direct the player to certain screens and coding for the right and wrong answer. At first, I had trouble with the text input question but I was eventually able to figure it out. I also thought that I was successful in being able to make my quiz easy to understand and easy to navigate through. . Discoveries . Throughout the experience I became more familiar with the use of block coding while using the basics of Java. I see this experience as a fun way to navigate through block coding and the basics of Java. . Challenges . I ran into a few challenges when making this quiz. One being showing the player if they answered correct or incorrect. At first I took the long way and made two different screens for an incorrect answer and correct answer. Later I realized that I should have used if then else statements to just set a picture to show correct or incorrect after entering the answer. I later displayed that in the final screen so if a player earns 3/3 they get a smiley face and if not they get a frowny face . Calculator . Design Process . For a second app I decided to design a calculator. I went for more of a straight forward approach by just adding 1 screen with multiple buttons and text inputs. I decided to have the 4 main calculating functions that any calculator would have. But I also decided to have 3 buttons that allowed you to either put the previous answer in the 1st number spot, 2nd number spot, or both. . Successes . I found success in the 4 main functions since the block coding already had the math operators so I just had to add the retrieved numbers from the elements to get the answer. . Discoveries . Creating a calculator as one of my apps allowed me to get more familiar with math functions and operators. . Challenges . I had trouble trying to figure out how to insert the answer back into the calculator for it to be subtracted, added, etc., but eventually I figured it out by setting the text of the input as the answer. .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/week%203/2022/09/10/applab-notes.html",
            "relUrl": "/markdown/week%203/2022/09/10/applab-notes.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Markdown Table",
            "content": "The Weeks Ahead . S.NO 9/5-9/9 9/12-9/16 9/19-9/23 Time . AP Physics | Unit 2 test | Start Unit 3 | Lab Week | 13 Oct 2022 | . Am Lit | Analyze poems | Create Poems | Recite Poems | - | . AP Calc AB | Unit 1 test | Start Unit 2 | Study for Unit 2 | - | . AP CSP | Creative Development | Frontend Development | Backend Development | - | .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2022/09/05/markdown-table.html",
            "relUrl": "/markdown/2022/09/05/markdown-table.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "HTML Fragments",
            "content": "HTML Fragments . Changing Theme from Minima to Leap Day . . When I changed my theme from Minima to Leap Day, the first thing I noticed was that all the colors changed. I also noticed that all of my posts moved to the left of my fastpages site. I also noticed that the formatting and text font changed. I liked how the title of my site was centered at the top of my screen. The only thing that I didn’t liek was how there is empty space on the right side of the site. Overall I like how nicer and cleaner the theme is compared to minima. . Search Feature . . When using the search page I am able to type in any key word that shows up throughout my fastpages website. In this case, I typed in fastpages and the page outputs links to any post, notebook, page and/or markdown that contains fastpages in it. . Tags . . As you can see I have tags for notesbooks that incule code in them as well as corresponding weeks for the different assignments. .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/week%202/2022/09/05/html-fragments.html",
            "relUrl": "/markdown/week%202/2022/09/05/html-fragments.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Dictionaries and Lists",
            "content": "name = &quot;Kalani Cabral-Omana&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Kalani Cabral-Omana &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Kalani Cabral-Omana&#39;, &#39;age&#39;: 16, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Kalani Cabral-Omana &lt;class &#39;str&#39;&gt; . Shoe Dictionary . Shoes = [] # Append to List a Dictionary of key/values related to a person and cars Shoes.append({ &quot;Shoe&quot;: &quot;Nike&quot;, &quot;Model&quot;: &quot;Dunk&quot;, &quot;Year&quot;: &quot;2016&quot;, &quot;Color&quot;: &quot;Blue&quot;, }) Shoes.append({ &quot;Shoe&quot;: &quot;Vans&quot;, &quot;Model&quot;: &quot;Classic&quot;, &quot;Year&quot;: &quot;2020&quot;, &quot;Color&quot;: &quot;Black&quot;, }) Shoes.append({ &quot;Shoe&quot;: &quot;Converse&quot;, &quot;Model&quot;: &quot;High-Top&quot;, &quot;Year&quot;: &quot;2021&quot;, &quot;Color&quot;: &quot;Blck&quot;, }) Shoes.append({ &quot;Shoe&quot;: &quot;Nike&quot;, &quot;Model&quot;: &quot;Blazers&quot;, &quot;Year&quot;: &quot;2020&quot;, &quot;Color&quot;: &quot;White&quot;, }) Shoes.append({ &quot;Shoe&quot;: &quot;Adidas&quot;, &quot;Model&quot;: &quot;Yeezy&quot;, &quot;Year&quot;: &quot;2023&quot;, &quot;Color&quot;: &quot;White&quot;, }) Shoes.append({ &quot;Shoe&quot;: &quot;Adidas&quot;, &quot;Model&quot;: &quot;Yeezy&quot;, &quot;Year&quot;: &quot;2022&quot;, &quot;Color&quot;: &quot;Black&quot;, }) Shoes.append({ &quot;Shoe&quot;: &quot;Nike&quot;, &quot;Model&quot;: &quot;Trainers&quot;, &quot;Year&quot;: &quot;2021&quot;, &quot;Color&quot;: &quot;Red&quot;, }) # Print the data structure print(Shoes) . [{&#39;Shoe&#39;: &#39;Nike&#39;, &#39;Model&#39;: &#39;Dunk&#39;, &#39;Year&#39;: &#39;2016&#39;, &#39;Color&#39;: &#39;Blue&#39;}, {&#39;Shoe&#39;: &#39;Vans&#39;, &#39;Model&#39;: &#39;Classic&#39;, &#39;Year&#39;: &#39;2020&#39;, &#39;Color&#39;: &#39;Black&#39;}, {&#39;Shoe&#39;: &#39;Converse&#39;, &#39;Model&#39;: &#39;High-Top&#39;, &#39;Year&#39;: &#39;2021&#39;, &#39;Color&#39;: &#39;Blck&#39;}, {&#39;Shoe&#39;: &#39;Nike&#39;, &#39;Model&#39;: &#39;Blazers&#39;, &#39;Year&#39;: &#39;2020&#39;, &#39;Color&#39;: &#39;White&#39;}, {&#39;Shoe&#39;: &#39;Adidas&#39;, &#39;Model&#39;: &#39;Yeezy&#39;, &#39;Year&#39;: &#39;2023&#39;, &#39;Color&#39;: &#39;White&#39;}, {&#39;Shoe&#39;: &#39;Adidas&#39;, &#39;Model&#39;: &#39;Yeezy&#39;, &#39;Year&#39;: &#39;2022&#39;, &#39;Color&#39;: &#39;Black&#39;}, {&#39;Shoe&#39;: &#39;Nike&#39;, &#39;Model&#39;: &#39;Trainers&#39;, &#39;Year&#39;: &#39;2021&#39;, &#39;Color&#39;: &#39;Red&#39;}] . Adding Records to the InfoDb . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Kalani&quot;, &quot;LastName&quot;: &quot;Cabral-Omana&quot;, &quot;DOB&quot;: &quot;April 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;kcabralomana@gmail.com.com&quot;, &quot;Owns_Shoes&quot;: [&quot;Nike Dunks, Black Vans, Black Converse, Nike Blazers&quot;] }) # Partner # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Navan&quot;, &quot;LastName&quot;: &quot;Yatavelli&quot;, &quot;DOB&quot;: &quot;October 31&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;navany@gmail.com&quot;, &quot;Owns_Shoes&quot;: [&quot;White Yeezy, Yeezy Slides&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Kalani&#39;, &#39;LastName&#39;: &#39;Cabral-Omana&#39;, &#39;DOB&#39;: &#39;April 18&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;kcabralomana@gmail.com.com&#39;, &#39;Owns_Shoes&#39;: [&#39;Nike Dunks, Black Vans, Black Converse, Nike Blazers&#39;]}, {&#39;FirstName&#39;: &#39;Navan&#39;, &#39;LastName&#39;: &#39;Yatavelli&#39;, &#39;DOB&#39;: &#39;October 31&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;navany@gmail.com&#39;, &#39;Owns_Shoes&#39;: [&#39;White Yeezy, Yeezy Slides&#39;]}] . Using Index in For Loop . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Shoes: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Shoes&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for i in range(len(InfoDb)): print_data(InfoDb[i]) for_loop() . For loop output Kalani Cabral-Omana Residence: San Diego Birth Day: April 18 Shoes: Nike Dunks, Black Vans, Black Converse, Nike Blazers Navan Yatavelli Residence: San Diego Birth Day: October 31 Shoes: White Yeezy, Yeezy Slides . Using Index in While Loop . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Kalani Cabral-Omana Residence: San Diego Birth Day: April 18 Shoes: Nike Dunks, Black Vans, Black Converse, Nike Blazers Navan Yatavelli Residence: San Diego Birth Day: October 31 Shoes: White Yeezy, Yeezy Slides . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Kalani Cabral-Omana Residence: San Diego Birth Day: April 18 Shoes: Nike Dunks, Black Vans, Black Converse, Nike Blazers Navan Yatavelli Residence: San Diego Birth Day: October 31 Shoes: White Yeezy, Yeezy Slides . Reverse Order . list = [&quot;Vans&quot;,&quot;Converse&quot;,&quot;Yeezy&quot;,&quot;Blazers&quot;,&quot;Slides&quot;,&quot;Trainers&quot;] for i in list: print(i[::-1]) print(list[::-1]) . snaV [&#39;Trainers&#39;, &#39;Slides&#39;, &#39;Blazers&#39;, &#39;Yeezy&#39;, &#39;Converse&#39;, &#39;Vans&#39;] esrevnoC [&#39;Trainers&#39;, &#39;Slides&#39;, &#39;Blazers&#39;, &#39;Yeezy&#39;, &#39;Converse&#39;, &#39;Vans&#39;] yzeeY [&#39;Trainers&#39;, &#39;Slides&#39;, &#39;Blazers&#39;, &#39;Yeezy&#39;, &#39;Converse&#39;, &#39;Vans&#39;] srezalB [&#39;Trainers&#39;, &#39;Slides&#39;, &#39;Blazers&#39;, &#39;Yeezy&#39;, &#39;Converse&#39;, &#39;Vans&#39;] sedilS [&#39;Trainers&#39;, &#39;Slides&#39;, &#39;Blazers&#39;, &#39;Yeezy&#39;, &#39;Converse&#39;, &#39;Vans&#39;] sreniarT [&#39;Trainers&#39;, &#39;Slides&#39;, &#39;Blazers&#39;, &#39;Yeezy&#39;, &#39;Converse&#39;, &#39;Vans&#39;] . Quiz That Stores In a List of Dictionaries . def question_with_response(prompt): print(&quot;Question: &quot; + prompt) word = &quot; &quot; questions = 4 # number of questions correct = 0 questions_answers = [{&quot;What command is used to include other functions that were previously developed?&quot; : &quot;import&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot; : &quot;if&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot; : &quot;expression&quot;, &quot;Variables for the values the function needs. Is passed as an argument when the function is called&quot; : &quot;parameters&quot;}] # dictionary # questions_answers.append = ({&quot;What command is used to include other functions that were previously developed?&quot; : &quot;import&quot;, # &quot;What command is used to evaluate correct or incorrect response in this example?&quot; : &quot;if&quot;, # &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot; : &quot;expression&quot;, # &quot;Variables for the values the function needs. Is passed as an argument when the function is called&quot; : &quot;parameters&quot;}) # dictionary for i in questions_answers: for question, answer in i.items(): question_with_response(question) # printing the questions word = input(&quot;Answer: &quot;) # variable that connects to the user&#39;s input if word == answer: # if the answer provided is correct print(&quot;You got it right!!&quot;) correct += 1 else: # if the answer provided is wrong print(&quot;Your answer was wrong&quot;) print(str(correct) + &quot;/&quot; + str(questions)) # correct/len(questions_answers) . Question: What command is used to include other functions that were previously developed? You got it right!! Question: What command is used to evaluate correct or incorrect response in this example? You got it right!! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? You got it right!! Question: Variables for the values the function needs. Is passed as an argument when the function is called Your answer was wrong 3/4 .",
            "url": "https://kcabralomana.github.io/Fastpages/jupyter/code/week%202/2022/08/29/TP120-python_lists.html",
            "relUrl": "/jupyter/code/week%202/2022/08/29/TP120-python_lists.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Picture Collage",
            "content": ". This is a photo of sticks that I tied up and arranged to spell out “ALOHA” when my family and I dropped my brother off at college. . . This is a photo of Bryce Canyon National Park when I went with my family in the summer of 2021. . . This is a photo my mom took of me and some other surfers, surfing in the evening. .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/week%201/2022/08/28/picture-collage.html",
            "relUrl": "/markdown/week%201/2022/08/28/picture-collage.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Bash Tool Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/kcabralomana/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Checking Jupyter . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/kcabralomana/.local/share/jupyter/kernels/bash javascript /home/kcabralomana/.local/share/jupyter/kernels/javascript python3 /home/kcabralomana/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/kcabralomana/.local/share/jupyter/kernels/python3 .",
            "url": "https://kcabralomana.github.io/Fastpages/jupyter/code/week%201/2022/08/28/bash-tool-setup.html",
            "relUrl": "/jupyter/code/week%201/2022/08/28/bash-tool-setup.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "American Literature",
            "content": "Thesis: . In her poem “Prayer for My Immigrant Relatives,” Bedikian establishes the usage of imagery to demonstrate how immigrants may feel unwelcome and unwanted rather than embraced and aided when entering America. . Paragraph: . The use of imagery demonstrates American culture as deterring, representing how Americans may disdain immigration. For example, when Bedikian writes, “peoples’ words resemble the buzz of beehives,” (lines 6-7). The writer implies that to the ears of her immigrant relatives, hearing the language intimidates them, similar to the effect that a beehive enacts on someone. The buzz of the beehive may also be interpreted as the chaos of the immigration process, helping to resemble the difficulties immigrants must face while achieving the American Dream. The author also writes, “help them to hear the music of home sung from balconies overflowing with woven rugs and bundled vegetables.” (lines 1-3). In these lines, Bedikian focuses more on her immigrant relatives missing home and distracting themselves. Bedikian writes about their home as a place of elegance and comfort. This helps exemplify how hard it may be for the immigrant relatives to assimilate into the new American culture while also maintaining balance with their own culture. Also, by formatting the poem as a prayer it helps represent the stressful situation, due to people dedicating prayer in times of distress. Overall, Bedikian’s usage of imagery assists her poem in validating the immigration process to America as somewhat unwelcoming and detering. .",
            "url": "https://kcabralomana.github.io/Fastpages/2022/08/27/AMERICAN-LITERATURE.html",
            "relUrl": "/2022/08/27/AMERICAN-LITERATURE.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Jupyter Notebook Quiz",
            "content": "import getpass, sys questions = 7 correct = 0 def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) if answer == msg: print(&quot;Correct Answer&quot;) global correct correct+=1 else: print (&quot;Incorrect Answer&quot;) question_and_answer(&quot;Fill in the blank ____ Musgrove&quot;, &quot;Joe&quot;) question_and_answer(&quot;Who is the starting first baseman for the Padres?&quot;, &quot;Josh Bell&quot;) question_and_answer(&quot;Who is the Manager for the Padres?&quot;, &quot;Bob Melvin&quot;) question_and_answer(&quot;Who is the starting third baseman for the Padres&quot;, &quot;Manny Machado&quot;) question_and_answer(&quot;What is the General Manager for the Padres?&quot;, &quot;A.J. Preller&quot;) question_and_answer(&quot;Who is the starting right fielder&quot;, &quot;Juan Soto&quot;) question_and_answer(&quot;What city are the Padres based in?&quot;, &quot;San Diego&quot;) print(correct, &quot;Answers correct&quot;) . Question: Fill in the blank ____ Musgrove Answer: Joe Correct Answer Question: Who is the starting first baseman for the Padres? Answer: idk Incorrect Answer Question: Who is the Manager for the Padres? Answer: Bob Melvin Correct Answer Question: Who is the starting third baseman for the Padres Answer: Manny Machado Correct Answer Question: What is the General Manager for the Padres? Answer: idk Incorrect Answer Question: Who is the starting right fielder Answer: Juan Soto Correct Answer Question: What city are the Padres based in? Answer: idk Incorrect Answer 4 Answers correct .",
            "url": "https://kcabralomana.github.io/Fastpages/jupyter/code/week%201/2022/08/21/notebook-quiz.html",
            "relUrl": "/jupyter/code/week%201/2022/08/21/notebook-quiz.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Goals",
            "content": "My goals for this year: . Learn how to navigate my way through code | I want to be successful in this class by communicating with my peers and learning from differeent experiences | I want to fufill my learning experience by preparing myself for any coding classes I take in the future | These are my goals for this class this year. .",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/week%200/2022/08/21/markdown.html",
            "relUrl": "/markdown/week%200/2022/08/21/markdown.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "My first Python Jupyter Notebook",
            "content": "Python test by printing &quot;Sup Bro&quot; . print(&quot;Sup&quot;) print(&quot;Bro&quot;) . Sup Bro .",
            "url": "https://kcabralomana.github.io/Fastpages/jupyter/code/week%200/2022/08/21/csp-post1.html",
            "relUrl": "/jupyter/code/week%200/2022/08/21/csp-post1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kcabralomana.github.io/Fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post26": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kcabralomana.github.io/Fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "API",
          "content": "API Implementation . LINK .",
          "url": "https://kcabralomana.github.io/Fastpages/apisubmenu/",
          "relUrl": "/apisubmenu/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Java Script",
          "content": "Jupyter Individual Design Elements . | JavaScript Usage | HTML fragments and JavaScript data to build a table | .",
          "url": "https://kcabralomana.github.io/Fastpages/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "I am Kalani Cabral-Omana, I am a junior in Del Norte High School. I like to surf, play soccer and hang out with friends in my free time. . Follow me on GitHub: kcabralomana [^1]. .",
          "url": "https://kcabralomana.github.io/Fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Kalani's CSP notes",
          "content": "CSP Notes . Launching VSCode through WSL . PS C: Users kcabr&gt; wsl (base) kcabralomana@MSI:/mnt/c/Users/kcabr$ cd (base) kcabralomana@MSI:~$ ls Fastpages anaconda3 vscode vscode4 (base) kcabralomana@MSI:~$ cd Fastpages (base) kcabralomana@MSI:~/Fastpages$ code . . Vocabulary . Repository: The location on GitHub where we modify our fastpages and collect all the work. . Clone: copying a repository onto you own system for you to modify. . Commit: This means to save and commit changes in order for the changes to update on your site. . Procedural Abstraction: bit of code are written and are generalized by variable parameter .",
          "url": "https://kcabralomana.github.io/Fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kcabralomana.github.io/Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}